// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);

    And(a=cInstruction, b=instruction[3], out=writeM);
    And(a=cInstruction, b=instruction[4], out=cInstructionAndLoadInDRegister);
    And(a=cInstruction, b=instruction[5], out=cInstructionAndLoadInARegister);

    // A register Input
	Mux16(a=aluOutput, b=instruction, sel=aInstruction, out=aRegisterInput);

	// A register
	Or(a=aInstruction, b=cInstructionAndLoadInARegister, out=loadInARegister);
	ARegister(in=aRegisterInput, load=loadInARegister, out=aRegisterOut, out[0..14]=addressM);

    // D register (also ALU first input)
    DRegister(in=aluOutput, load=cInstructionAndLoadInDRegister, out=dRegisterOut);

    //ALU second input. Use the 'a' bit of the computation to check if should act on A or M
    And(a=cInstruction, b=instruction[12], out=useMAsAluSecondInput);
    Mux16(a=aRegisterOut, b=inM, sel=useMAsAluSecondInput, out=aluSecondInput);

    //ALU
    ALU(
        x=dRegisterOut,
        y=aluSecondInput,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOutput,
        out=outM,
        zr=zr,
        ng=ng
    );

    //PC
    Not(in=ng, out=positiveOrZero);
    Xor(a=positiveOrZero, b=zr, out=strictlyPositive);

    And(a=instruction[0], b=strictlyPositive, out=positiveAndJump);
    And(a=instruction[1], b=zr, out=zeroAndJump);
    And(a=instruction[2], b=ng, out=negativeAndJump);

    Or(a=positiveAndJump, b=zeroAndJump, out=positiveOrZeroAndJump);
    Or(a=positiveOrZeroAndJump, b=negativeAndJump, out=jumpIfCInstruction);

    And(a=jumpIfCInstruction, b=cInstruction, out=jump);
    Not(in=jump, out=increment);

    PC(in=aRegisterOut, inc=increment, load=jump, reset=reset, out[0..14]=pc);
}